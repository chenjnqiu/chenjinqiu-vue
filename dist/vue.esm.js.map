{"version":3,"file":"vue.esm.js","sources":["../src/index.js"],"sourcesContent":["// 用一个全局变量存储被注册的副作用函数\r\nlet activeEffect\r\n// effect 栈\r\nconst effectStack = [] // 新增\r\n\r\n// effect 函数用于注册副作用函数\r\nfunction effect(fn) {\r\n    const effectFn = () => {\r\n        // 调用 cleanup 函数完成清除工作\r\n        cleanup(effectFn)\r\n        // 当 effectFn 执行时，将其设置为当前激活的副作用函数\r\n        activeEffect = effectFn\r\n        // 在调用副作用函数之前将当前副作用函数压入栈中\r\n        effectStack.push(effectFn)\r\n        fn()\r\n        // 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并把activeEffect 还原为之前的值\r\n        effectStack.pop()\r\n        activeEffect = effectStack[effectStack.length - 1]\r\n    }\r\n    // 将 options 挂载到 effectFn 上\r\n    effectFn.options = options // 新增\r\n    // activeEffect.deps 用来存储所有与该副作用函数相关联的依赖集合\r\n    effectFn.deps = []\r\n    // 执行副作用函数\r\n    effectFn()\r\n}\r\n\r\n\r\n// 原始数据\r\nconst data = { foo: 1 }\r\n// 储存副作用桶\r\nconst bucket = new WeakMap()\r\n// 对原始数据拦截(只有在拦截对象obj上面操作才会走get或者set方法，在原始数据data上面操作不会走get或者set方法)\r\nconst obj = new Proxy(data, {\r\n    // 拦截读取操作\r\n    get: function (target, key) {\r\n        // 将副作用函数 activeEffect 添加到存储副作用函数的桶中\r\n        track(target, key)\r\n        return target[key]\r\n    },\r\n    // 拦截设置操作\r\n    set: function (target, key, newVal) {\r\n        // 设置属性值\r\n        target[key] = newVal\r\n        // 把副作用函数从桶里取出并执行\r\n        trigger(target, key)\r\n    }\r\n})\r\n\r\n// 全局变量\r\n// let temp1, temp2\r\n\r\n// // effectFn1 嵌套了 effectFn2\r\n// effect(function effectFn1() {\r\n//     console.log('effectFn1 执行')\r\n\r\n//     effect(function effectFn2() {\r\n//         console.log('effectFn2 执行')\r\n//         // 在 effectFn2 中读取 obj.bar 属性\r\n//         temp2 = obj.bar\r\n//     })\r\n//     // 在 effectFn1 中读取 obj.foo 属性\r\n//     temp1 = obj.foo\r\n// })\r\n\r\neffect(() => {\r\n    console.log(obj.foo)\r\n},\r\n    // options\r\n    {\r\n        // 调度器 scheduler 是一个函数\r\n        scheduler(fn) {\r\n             \r\n        }\r\n    }\r\n)\r\n\r\n// 1秒后修改响应式数据\r\nsetTimeout(() => {\r\n    // 副作用函数中并没有读取 notExist 属性的值\r\n    // obj.text = 'hello vue3'\r\n    // obj.bar = false\r\n    // obj.foo = false\r\n}, 2000)\r\n\r\n// 在 get 拦截函数内调用 track 函数追踪变化 \r\nfunction track(target, key) {\r\n    // 没有 activeEffect，直接 return\r\n    if (!activeEffect) return target[key]\r\n    // 根据 target 从“桶”中取得 depsMap，它也是一个 Map 类型：key -->effects\r\n    let depsMap = bucket.get(target)\r\n    // 如果不存在 depsMap，那么新建一个 Map 并与 target 关联\r\n    if (!depsMap) {\r\n        bucket.set(target, (depsMap = new Map()))\r\n    }\r\n    // 再根据 key 从 depsMap 中取得 deps，它是一个 Set 类型，里面存储着所有与当前 key 相关联的副作用函数：effects\r\n    let deps = depsMap.get(key)\r\n    // 如果 deps 不存在，同样新建一个 Set 并与 key 关联\r\n    if (!deps) {\r\n        depsMap.set(key, (deps = new Set()))\r\n    }\r\n    // 最后将当前激活的副作用函数添加到“桶”里\r\n    deps.add(activeEffect)\r\n    // deps 就是一个与当前副作用函数存在联系的依赖集合\r\n    // 将其添加到 activeEffect.deps 数组中\r\n    activeEffect.deps.push(deps) // 新增\r\n}\r\n\r\n// 在 set 拦截函数内调用 trigger 函数触发变化\r\nfunction trigger(target, key) {\r\n    const depsMap = bucket.get(target)\r\n    if (!depsMap) return\r\n    const effects = depsMap.get(key)\r\n    const effectsToRun = new Set() // 新增\r\n    effects && effects.forEach(effectFn => {\r\n        // 如果 trigger 触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行\r\n        if (effectFn !== activeEffect) {\r\n            effectsToRun.add(effectFn)\r\n        }\r\n    })\r\n    effectsToRun.forEach(effectFn => effectFn())\r\n}\r\n\r\n// 副作用执行时先清除之前的副作用\r\nfunction cleanup(effectFn) {\r\n    // 遍历 effectFn.deps 数组\r\n    for (let i = 0; i < effectFn.deps.length; i++) {\r\n        // deps 是依赖集合\r\n        const deps = effectFn.deps[i]\r\n        // 将 effectFn 从依赖集合中移除\r\n        deps.delete(effectFn)\r\n    }\r\n    // 最后需要重置 effectFn.deps 数组\r\n    effectFn.deps.length = 0\r\n}"],"names":["activeEffect","effectStack","effect","fn","effectFn","cleanup","push","pop","length","options","deps","data","foo","bucket","WeakMap","obj","Proxy","get","target","key","track","set","newVal","trigger","depsMap","Map","Set","add","effectsToRun","effects","forEach","i","console","log","setTimeout"],"mappings":"sRACA,IAAIA,aAEEC,YAAc,GAGpB,SAASC,OAAOC,GACK,SAAXC,IAEFC,QAAQD,CAAQ,EAEhBJ,aAAeI,EAEfH,YAAYK,KAAKF,CAAQ,EACzBD,IAEAF,YAAYM,IAAG,EACfP,aAAeC,YAAYA,YAAYO,OAAS,GAGpDJ,EAASK,QAAUA,QAEnBL,EAASM,KAAO,GAEhBN,GACJ,CAIA,IAAMO,KAAO,CAAEC,IAAK,CAAE,EAEhBC,OAAS,IAAIC,QAEbC,IAAM,IAAIC,MAAML,KAAM,CAExBM,IAAK,SAAUC,EAAQC,GAGnB,OADAC,MAAMF,EAAQC,CAAG,EACVD,EAAOC,EACjB,EAEDE,IAAK,SAAUH,EAAQC,EAAKG,GAExBJ,EAAOC,GAAOG,EAEdC,QAAQL,EAAQC,CAAG,CACvB,CACJ,CAAC,EAuCD,SAASC,MAAMF,EAAQC,GAEnB,GAAI,CAACnB,aAAc,OAAOkB,EAAOC,GAEjC,IAAIK,EAAUX,OAAOI,IAAIC,CAAM,EAM3BR,GAJCc,GACDX,OAAOQ,IAAIH,EAASM,EAAU,IAAIC,GAAK,EAGhCD,EAAQP,IAAIE,CAAG,GAErBT,GACDc,EAAQH,IAAIF,EAAMT,EAAO,IAAIgB,GAAK,EAGtChB,EAAKiB,IAAI3B,YAAY,EAGrBA,aAAaU,KAAKJ,KAAKI,CAAI,CAC/B,CAGA,SAASa,QAAQL,EAAQC,GACrB,IAGMS,EAHAJ,EAAUX,OAAOI,IAAIC,CAAM,EAC5BM,IACCK,EAAUL,EAAQP,IAAIE,CAAG,EACzBS,EAAe,IAAIF,IACzBG,GAAWA,EAAQC,QAAQ,SAAA1B,GAEnBA,IAAaJ,cACb4B,EAAaD,IAAIvB,CAAQ,CAEjC,CAAC,EACDwB,EAAaE,QAAQ,SAAA1B,GAAQ,OAAIA,EAAQ,EAAG,EAChD,CAGA,SAASC,QAAQD,GAEb,IAAK,IAAI2B,EAAI,EAAGA,EAAI3B,EAASM,KAAKF,OAAQuB,CAAC,GAE1B3B,EAASM,KAAKqB,GAEvB,OAAQ3B,CAAQ,EAGxBA,EAASM,KAAKF,OAAS,CAC3B,CArEAN,OAAO,WACH8B,QAAQC,IAAIlB,IAAIH,GAAG,CACvB,CAOK,EAILsB,WAAW,aAKR,GAAI"}